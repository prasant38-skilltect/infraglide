#!/bin/bash

# Enhanced Terraform wrapper for InfraGlide Pipeline Designer
# Provides realistic Terraform command simulation with proper output formatting

COMMAND="$1"
CURRENT_DIR=$(pwd)

# Function to read and parse main.tf.json for resource display
parse_terraform_config() {
    if [ -f "main.tf.json" ]; then
        # Extract provider and resources from main.tf.json
        cat main.tf.json | grep -o '"[^"]*"' | sed 's/"//g' | grep -E '^(aws_|azure_|google_)' | head -10
    else
        echo "ec2_instance.web_server"
        echo "s3_bucket.data_storage"
    fi
}

# Function to simulate realistic resource planning
show_plan_output() {
    echo "Terraform used the selected providers to generate the following execution plan."
    echo "Resource actions are indicated with the following symbols:"
    echo "  + create"
    echo ""
    echo "Terraform will perform the following actions:"
    echo ""
    
    # Parse actual configuration if available
    resources=$(parse_terraform_config)
    
    for resource in $resources; do
        if [[ $resource == *"ec2"* ]] || [[ $resource == *"instance"* ]] || [[ $resource == *"vm"* ]] || [[ $resource == *"compute"* ]]; then
            echo "  # $resource will be created"
            echo "  + resource \"$resource\" \"main\" {"
            echo "      + instance_type = \"t3.micro\""
            echo "      + ami           = \"ami-0c55b159cbfafe1d0\""
            echo "      + vpc_security_group_ids = [\"sg-12345678\"]"
            echo "      + subnet_id     = \"subnet-12345678\""
            echo "    }"
            echo ""
        elif [[ $resource == *"s3"* ]] || [[ $resource == *"storage"* ]] || [[ $resource == *"bucket"* ]]; then
            echo "  # $resource will be created"
            echo "  + resource \"$resource\" \"main\" {"
            echo "      + bucket        = \"infraglide-pipeline-storage-$(date +%s)\""
            echo "      + acl           = \"private\""
            echo "      + versioning {" 
            echo "          + enabled = true"
            echo "        }"
            echo "    }"
            echo ""
        elif [[ $resource == *"rds"* ]] || [[ $resource == *"database"* ]] || [[ $resource == *"sql"* ]]; then
            echo "  # $resource will be created"
            echo "  + resource \"$resource\" \"main\" {"
            echo "      + engine         = \"mysql\""
            echo "      + engine_version = \"8.0\""
            echo "      + instance_class = \"db.t3.micro\""
            echo "      + allocated_storage = 20"
            echo "    }"
            echo ""
        fi
    done
    
    echo "Plan: $(echo "$resources" | wc -l) to add, 0 to change, 0 to destroy."
}

case "$COMMAND" in
    "init")
        echo "Initializing the backend..."
        echo ""
        echo "Initializing provider plugins..."
        echo "- Finding hashicorp/aws versions matching \"~> 5.0\"..."
        echo "- Installing hashicorp/aws v5.31.0..."
        echo "- Finding hashicorp/azurerm versions matching \"~> 3.0\"..."
        echo "- Installing hashicorp/azurerm v3.84.0..."
        echo "- Finding hashicorp/google versions matching \"~> 4.0\"..."
        echo "- Installing hashicorp/google v4.51.0..."
        echo ""
        echo "Terraform has been successfully initialized!"
        echo ""
        echo "You may now begin working with Terraform. Try running \"terraform plan\" to see"
        echo "any changes that are required for your infrastructure."
        exit 0
        ;;
    "plan")
        echo "Running plan on infrastructure..."
        echo ""
        show_plan_output
        exit 0
        ;;
    "apply")
        echo "Running apply on infrastructure..."
        echo ""
        show_plan_output
        echo ""
        echo "Do you want to perform these actions?"
        echo "  Terraform will perform the actions described above."
        echo "  Only 'yes' will be accepted to approve."
        echo ""
        echo "Apply complete! Resources: $(parse_terraform_config | wc -l) added, 0 changed, 0 destroyed."
        echo ""
        echo "Outputs:"
        echo ""
        exit 0
        ;;
    "destroy")
        echo "Running destroy on infrastructure..."
        echo ""
        resources=$(parse_terraform_config)
        echo "Terraform will perform the following actions:"
        echo ""
        for resource in $resources; do
            echo "  # $resource will be destroyed"
            echo "  - resource \"$resource\" \"main\" {"
            echo "      - (all attributes will be removed)"
            echo "    }"
            echo ""
        done
        echo "Plan: 0 to add, 0 to change, $(echo "$resources" | wc -l) to destroy."
        echo ""
        echo "Destroy complete! Resources: $(echo "$resources" | wc -l) destroyed."
        exit 0
        ;;
    "validate")
        echo "Success! The configuration is valid."
        exit 0
        ;;
    "show")
        echo "# main.tf.json"
        echo ""
        if [ -f "main.tf.json" ]; then
            cat main.tf.json
        else
            echo "No state file found. Run 'terraform init' and 'terraform apply' first."
        fi
        exit 0
        ;;
    "version" | "--version")
        echo "Terraform v1.9.5 (InfraGlide Enhanced Wrapper)"
        echo "on linux_amd64"
        echo ""
        echo "Your version of Terraform is out of date! The latest version"
        echo "is 1.9.8. You can update by downloading from https://www.terraform.io/downloads.html"
        exit 0
        ;;
    "--help" | "help" | "")
        echo "Usage: terraform [global options] <subcommand> [args]"
        echo ""
        echo "The available commands for execution are listed below."
        echo "The primary workflow commands are given first, followed by"
        echo "less common or more advanced commands."
        echo ""
        echo "Main commands:"
        echo "  init          Prepare your working directory for other commands"
        echo "  validate      Check whether the configuration is valid"
        echo "  plan          Show changes required by the current configuration"
        echo "  apply         Create or update infrastructure"
        echo "  destroy       Destroy previously-created infrastructure"
        echo ""
        echo "All other commands:"
        echo "  show          Show the current state or a saved plan"
        echo "  version       Show the current Terraform version"
        exit 0
        ;;
    *)
        echo "Terraform v1.9.5 (InfraGlide Enhanced Wrapper)"
        echo ""
        echo "Usage: terraform [global options] <subcommand> [args]"
        echo ""
        echo "Unknown command: \"$COMMAND\""
        echo ""
        echo "Run 'terraform --help' for available commands."
        exit 1
        ;;
esac